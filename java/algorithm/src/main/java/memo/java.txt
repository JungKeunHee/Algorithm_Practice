📘 Java 기술면접 질문 정리

✅ 1. Java 기초 문법
🔹 String vs StringBuilder vs StringBuffer
String: 불변(immutable) 객체. 문자열 수정 시 새 객체 생성됨.

StringBuilder: 가변 객체. 단일 스레드 환경에서 빠름.

StringBuffer: 가변 객체 + 동기화 지원 (멀티스레드 환경용).

🔹 == vs equals()
==: 주소값(참조) 비교.

.equals(): 값(내용) 비교.

🔹 Overloading vs Overriding
Overloading: 메서드 이름 같고, 파라미터 다름.

Overriding: 부모 메서드 재정의, @Override 사용.

✅ 2. 객체지향 프로그래밍(OOP)
🔹 OOP의 4대 특징
캡슐화: 데이터 + 메서드 묶고 외부에 감춤.

상속: 부모 클래스 기능을 자식이 물려받음.

다형성: 하나의 메서드가 다양한 형태로 동작.

추상화: 공통된 개념을 도출하여 단순화.

🔹 추상 클래스 vs 인터페이스
추상 클래스: is-a 관계. 일반 메서드 + 추상 메서드 가능.

인터페이스: can-do 관계. 다중 구현 가능. Java 8부터 default 메서드 가능.

✅ 3. 예외 처리
🔹 Checked vs Unchecked Exception
CheckedException: 컴파일 타임에 체크됨. (IOException)

UncheckedException: 런타임에 발생. (NullPointerException)

🔹 try-catch-finally
java
복사
편집
try {
    // 예외 발생 가능 코드
} catch (Exception e) {
    // 예외 처리
} finally {
    // 항상 실행됨 (자원 해제 등)
}
✅ 4. 컬렉션 프레임워크
🔹 List / Set / Map 차이
List: 순서 있음, 중복 허용 (ArrayList)

Set: 순서 없음, 중복 불가 (HashSet)

Map: key-value 저장 (HashMap, TreeMap)

🔹 HashMap vs Hashtable
HashMap: 동기화 ❌, 빠름

Hashtable: 동기화 ⭕, 느림

🔹 HashMap 내부 동작
key.hashCode() → 버킷 위치 계산

같은 버킷이면 equals()로 실제 key 비교

Java 8부터 충돌 많으면 LinkedList → TreeNode(이진 트리) 전환

✅ 5. 스레드 & 동시성
🔹 Thread란?
하나의 프로세스 내 실행 단위. 여러 작업을 동시에 처리 가능.

🔹 synchronized 키워드
임계 영역을 한 스레드만 접근 가능하게 함 → 데이터 정합성 유지

🔹 volatile 키워드
변수 값을 캐시 말고 메인 메모리에서 직접 읽도록 강제

✅ 6. JVM 구조
🔹 JVM 메모리 구조
Heap: 객체 저장

Stack: 지역 변수, 호출 스택

Method Area: 클래스, 메서드 정보

PC Register: 현재 실행 중인 명령어 위치

🔹 GC (Garbage Collection)
사용하지 않는 객체를 JVM이 자동 제거

🔹 Minor GC / Major GC
Minor GC: Young 영역(Eden, Survivor) 정리

Major GC: Old 영역 정리 → 속도 느림

✅ 7. Java 8 이상 주요 기능
🔹 람다식 (Lambda)
java
복사
편집
(x, y) -> x + y
익명 함수 문법. 간결한 코드 작성 가능

🔹 Stream API
java
복사
편집
list.stream()
    .filter(x -> x > 10)
    .collect(Collectors.toList());
함수형 방식으로 컬렉션 처리 (필터, 맵핑 등)

🔹 Optional
java
복사
편집
Optional.ofNullable(user).orElse(defaultUser);
null 방지용 래퍼 클래스

✅ 8. 실무형 질문
🔹 싱글톤 패턴 구현
java
복사
편집
public class Singleton {
    private static final Singleton instance = new Singleton();
    private Singleton() {}
    public static Singleton getInstance() {
        return instance;
    }
}
생성자 private, 내부에서 static 인스턴스 생성

🔹 equals()와 hashCode()를 같이 오버라이드하는 이유?
Hash 기반 자료구조 (HashMap, HashSet)에서 정확한 비교 및 저장을 위해 필수

🔹 직렬화 (Serialization)
객체를 바이트 형태로 변환해 파일 저장 or 전송 가능하게 만듦 (implements Serializable)

📘 Java & 운영체제 면접 질문: 프로세스 vs 스레드

======================================================================================

✅ 1. 기본 개념

구분	프로세스 (Process)	스레드 (Thread)
정의	실행 중인 프로그램	프로세스 내 작업의 최소 실행 단위
메모리	독립된 메모리 공간 사용	프로세스 메모리를 공유함
생성 비용	무거움 (리소스 많이 소비)	가벼움 (빠르게 생성 가능)
통신 방식	IPC (Inter-Process Communication) 필요	같은 메모리 공간 공유로 통신 간편
충돌 영향	하나 죽어도 다른 프로세스엔 영향 없음	하나 죽으면 전체 프로세스에 영향 가능

✅ 2. 특징 요약

프로세스

완전히 독립적인 실행 단위
각자 Heap, Stack, Code 영역을 가짐
OS 스케줄러에 의해 CPU 자원 배정 받음

스레드

같은 프로세스의 자원을 공유함
주로 멀티태스킹 또는 병렬 처리에 사용됨
자바에서는 Thread, Runnable, ExecutorService 등으로 구현

======================================================================================

✅ 1. JDK가 무엇인가?
🔹 정의
**JDK(Java Development Kit)**는 Java로 프로그램을 만들기 위한 개발 도구 모음
즉, Java 프로그램을 작성(코딩), 컴파일, 실행할 수 있게 도와주는 "개발자용 도구 세트"

🔹 구성 요소
JRE (Java Runtime Environment): 실행 환경. 이미 만들어진 Java 프로그램을 실행할 수 있게 해줌
javac (컴파일러): .java 파일을 .class(바이트코드)로 바꿔줌
java (런처): .class 파일을 실행해주는 명령어
기타 도구들: 디버거, 문서 생성기 등

💡 비유: JDK는 '공장', JRE는 '완성된 제품을 쓰는 소비자', javac는 '제조 기계', java는 '제품 작동 버튼'

✅ 2. HashMap vs Hashtable 차이점
항목	        HashMap	                            Hashtable
동기화	❌ 비동기(멀티스레드 환경에 안전하지 않음)	✅ 동기화 O(멀티스레드 환경에 안전)
성능	빠름 (단일 스레드 환경에 적합)	                느림 (동기화 때문에 느림)
null 허용	key도 value도 null 허용	            key, value 모두 null ❌
등장 시기	Java 1.2부터	                        Java 초창기부터 (Legacy 클래스)
사용 추천	✅ 최신 코드에서 많이 사용	            ❌ 요즘은 거의 안 씀 (대체품: ConcurrentHashMap)

💡 요약: HashMap은 빠르고 유연하지만 멀티스레드 환경에선 안전하지 않아. Hashtable은 안전하지만 느려서 잘 안 써. 요즘은 ConcurrentHashMap을 더 많이 써!

✅ 3. 사용자가 브라우저에 주소(URL)을 입력하면 어떤 과정이 일어나는가?
흐름도 형식으로 단계별로 설명할게:

주소 입력
사용자가 주소창에 www.example.com 입력

DNS 조회
→ 브라우저가 example.com에 해당하는 IP 주소를 DNS 서버에 요청함
→ 예: 93.184.216.34

TCP 연결
→ 브라우저와 서버가 3-way 핸드셰이크로 연결 수립

HTTP 요청 전송
→ 브라우저가 서버에 "GET / HTTP/1.1" 같은 요청을 보냄

서버 응답
→ 서버가 HTML, CSS, JS 등의 리소스를 응답함 (HTTP Response)

렌더링
→ 브라우저가 HTML을 해석하여 화면에 표시
→ JS가 동작하여 동적 UI 처리

추가 리소스 요청
→ 이미지, JS, 폰트 등 추가 요청

브라우저에 최종 화면 표시