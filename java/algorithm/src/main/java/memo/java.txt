📘 Java 기술면접 질문 정리
✅ 1. Java 기초 문법
String vs StringBuilder vs StringBuffer
String은 불변(immutable) 객체로 문자열 변경 시 새 객체를 생성합니다.
StringBuilder는 가변 객체로 문자열 변경이 가능하며, 단일 스레드 환경에서 빠릅니다.
StringBuffer는 StringBuilder와 유사하지만, 스레드 안전(Thread-safe) 하도록 동기화되어 있습니다.

== vs equals()
==는 주소(참조값)를 비교하고,
.equals()는 실제 값(내용)을 비교합니다.

Overloading vs Overriding

Overloading: 같은 메서드 이름, 다른 파라미터

Overriding: 부모 메서드를 자식 클래스에서 재정의

✅ 2. 객체지향 프로그래밍(OOP)
OOP의 4대 특성:

캡슐화: 데이터와 메서드를 하나로 묶고 외부에 감추기

상속: 코드 재사용, 부모 클래스의 기능을 자식이 사용

다형성: 같은 메서드가 여러 형태로 실행 (오버라이딩 등)

추상화: 공통된 특징을 뽑아낸 개념화

추상 클래스 vs 인터페이스
추상 클래스는 "is-a" 관계, 일반 메서드도 가질 수 있음.
인터페이스는 "can-do" 관계, 다중 구현 가능.

✅ 3. 예외 처리
CheckedException vs UncheckedException

Checked: 컴파일 타임에 예외 처리 강제 (ex: IOException)

Unchecked: 런타임에 발생, 명시적 처리 X (ex: NullPointerException)

try-catch-finally 구조

try: 예외 발생 가능 코드

catch: 예외 처리

finally: 항상 실행되는 블록 (자원 정리 등)

✅ 4. 컬렉션 프레임워크
List / Set / Map 차이점

List: 순서 O, 중복 허용 (ArrayList 등)

Set: 순서 X, 중복 X (HashSet 등)

Map: key-value 쌍 저장 (HashMap 등)

HashMap vs Hashtable

HashMap: 동기화 X, 빠름 (멀티스레드 환경에서 직접 처리 필요)

Hashtable: 동기화 O, 느림

HashMap 내부 동작

key의 hashCode() 값을 통해 버킷 위치 계산

동일 버킷 내에선 equals()로 키 비교

Java 8 이후에는 충돌 많으면 LinkedList → Tree 구조로 변경됨

✅ 5. 스레드 & 동시성
Thread란?
하나의 프로세스 안에서 실행되는 작은 단위. 동시에 여러 작업 가능

synchronized 키워드
한 번에 한 스레드만 임계영역에 접근하도록 함 → 데이터 정합성 유지

volatile 키워드
변수 값을 캐시 대신 메인 메모리에서 직접 읽음. 최신 값 보장

✅ 6. JVM 구조
JVM 메모리 구조

Heap: 객체 저장

Stack: 메서드 호출 시 지역 변수 저장

Method Area: 클래스 정보 저장

PC Register: 현재 실행 중인 명령어 위치 저장

GC(Garbage Collection)
사용하지 않는 객체를 메모리에서 자동으로 제거

Minor GC / Major GC

Minor GC: Young 영역(Eden, Survivor) 정리

Major GC: Old 영역 정리 → 더 오래 걸림

✅ 7. Java 8 이상 기능
람다식 (Lambda Expression)
함수형 프로그래밍 문법 → 코드 간결해짐
(x, y) -> x + y;

Stream API
반복문 대신 함수형 방식으로 데이터 필터링, 맵핑 등 처리
list.stream().filter(x -> x > 10).collect(Collectors.toList());

Optional
NullPointerException 방지를 위해 등장한 래퍼 클래스
Optional.ofNullable(user).orElse(defaultUser);

✅ 8. 실무형 질문
싱글톤 패턴 구현법

생성자를 private으로 막고, static 인스턴스를 내부에서 생성 후 반환

equals와 hashCode 왜 같이 오버라이드?
Hash 기반 자료구조(HashMap, HashSet)에서 key 충돌 방지 목적

직렬화(Serialization)
객체를 바이트로 변환하여 파일 저장/네트워크 전송 가능하게 만듦
